CREATE ALIAS IF NOT EXISTS getDate AS
    'java.util.Date getDate() {
        return new java.util.Date();
    }';

CREATE TABLE IF NOT EXISTS users
(
    id       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    VARCHAR(40) NOT NULL,
    login    VARCHAR(40) NOT NULL,
    name     VARCHAR(40),
    birthday TIMESTAMP,
    CONSTRAINT login_check
    CHECK (login NOT LIKE '% %' and login NOT LIKE ''),
    CONSTRAINT email_at
    CHECK (email LIKE '%@%'),
    CONSTRAINT birthday_check
    CHECK (CAST(birthday AS date) <= CAST(getDate() as date))
    );

CREATE TABLE IF NOT EXISTS mpa
(
    id      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name    VARCHAR(40)
);

CREATE TABLE IF NOT EXISTS genres
(
    id      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name    VARCHAR(40)
);

CREATE TABLE IF NOT EXISTS films
(
    id           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name         VARCHAR(40) NOT NULL,
    release_date TIMESTAMP,
    description  VARCHAR(200),
    duration     BIGINT,
    rate         BIGINT,
    mpa          BIGINT,
    CONSTRAINT name_check
    CHECK (name NOT LIKE ''),
    CONSTRAINT release_date_check
    CHECK (CAST(release_date AS date) >= CAST('1895-12-28' AS date)),
    CONSTRAINT positive_duration
    CHECK (duration > 0),
    CONSTRAINT fk_film_mpa
    FOREIGN KEY (mpa)
    REFERENCES mpa (id)
    );

CREATE TABLE IF NOT EXISTS friendship
(
    user_id   BIGINT NOT NULL,
    friend_id BIGINT NOT NULL,
    CONSTRAINT fk_friendship_user_id
    FOREIGN KEY (user_id)
    REFERENCES users (id),
    CONSTRAINT fk_friendship_friend_id
    FOREIGN KEY (friend_id)
    REFERENCES users (id),
    PRIMARY KEY (user_id, friend_id)
    );

CREATE TABLE IF NOT EXISTS likes
(
    film_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    CONSTRAINT fk_like_film_id
    FOREIGN KEY (film_id)
    REFERENCES films (id),
    CONSTRAINT fk_like_user_id
    FOREIGN KEY (user_id)
    REFERENCES users (id),
    PRIMARY KEY (film_id, user_id)
    );

CREATE TABLE IF NOT EXISTS film_genre
(
    film_id    BIGINT NOT NULL,
    genre_id   BIGINT NOT NULL,
    CONSTRAINT fk_film_genre_film_id
    FOREIGN KEY (film_id)
    REFERENCES films (id),
    CONSTRAINT fk_genre_name_id
    FOREIGN KEY (genre_id)
    REFERENCES genres (id),
    PRIMARY KEY (film_id, genre_id)
    );